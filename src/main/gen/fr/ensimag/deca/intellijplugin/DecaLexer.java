/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.ensimag.deca.intellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static fr.ensimag.deca.intellijplugin.psi.DecaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_DecaLexer.flex</tt>
 */
public class DecaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\43\1\13\1\0\1\15\1\53\1\42\1\0\1\34\1\35"+
    "\1\6\1\51\1\21\1\52\1\10\1\5\12\7\1\0\1\20\1\44\1\22\1\45\2\0\5\15\1\11\2"+
    "\15\1\55\21\15\1\0\1\14\2\0\1\15\1\0\1\46\1\15\1\47\1\54\1\24\1\12\1\15\1"+
    "\37\1\31\2\15\1\32\1\56\1\27\1\50\1\30\1\15\1\23\1\40\1\25\1\26\1\15\1\36"+
    "\1\33\2\15\1\16\1\41\1\17\7\0\1\1\32\0\1\4\337\0\1\4\177\0\13\4\35\0\2\1\5"+
    "\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\6\10\1\16"+
    "\1\17\1\10\2\2\1\20\1\21\1\22\2\10\1\23"+
    "\1\24\1\25\1\26\1\0\2\27\1\10\1\0\1\30"+
    "\1\0\1\31\10\10\1\32\2\10\1\33\1\34\1\35"+
    "\1\36\1\37\2\10\1\0\1\10\1\30\6\10\1\40"+
    "\5\10\1\41\1\10\1\42\3\10\1\43\1\10\1\44"+
    "\1\45\1\46\5\10\1\47\4\10\1\50\2\10\1\51"+
    "\1\52\1\53\4\10\1\54\3\10\1\55\1\56\1\57"+
    "\3\10\1\60\2\10\1\61\1\62\1\10\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\57\0\353"+
    "\0\u011a\0\u0149\0\57\0\57\0\57\0\57\0\u0178\0\u01a7"+
    "\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\57\0\57\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\57"+
    "\0\57\0\57\0\u0439\0\u0468\0\u0497\0\57\0\u04c6\0\u0149"+
    "\0\57\0\u04f5\0\57\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\353\0\u069c\0\u06cb\0\57\0\57"+
    "\0\57\0\57\0\57\0\u06fa\0\u0729\0\u0758\0\u0787\0\u0149"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\353\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\353\0\u09bb\0\u0468\0\u09ea"+
    "\0\u0a19\0\u0a48\0\353\0\u0a77\0\353\0\353\0\353\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\353\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\353\0\353\0\353\0\u0cda"+
    "\0\u0d09\0\u0d38\0\u0d67\0\353\0\u0d96\0\u0dc5\0\u0df4\0\353"+
    "\0\353\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\353\0\u0edf\0\u0f0e"+
    "\0\353\0\353\0\u0f3d\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\10\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\10\1\23\1\24\1\25\2\10"+
    "\1\26\1\27\1\30\2\10\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\10\1\40\1\41\1\42\3\10"+
    "\60\0\4\3\57\0\1\43\1\44\57\0\1\6\1\45"+
    "\2\46\53\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\11\10\2\0\3\10\5\0\3\10\3\0\3\10\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\11\10\2\0"+
    "\3\10\5\0\1\47\2\10\3\0\3\10\13\50\1\51"+
    "\1\52\42\50\22\0\1\53\43\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\1\10\1\54\7\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\7\10\1\55\1\56\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\1\57\10\10\2\0\1\10\1\60"+
    "\1\10\5\0\3\10\3\0\3\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\1\10\1\61\1\10\1\62"+
    "\5\10\2\0\3\10\5\0\3\10\3\0\3\10\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\1\63\10\10"+
    "\2\0\3\10\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\1\10\1\64\2\0\1\10\5\0\4\10\1\65"+
    "\4\10\2\0\3\10\5\0\3\10\3\0\3\10\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\11\10\2\0"+
    "\1\10\1\66\1\10\5\0\3\10\3\0\3\10\41\0"+
    "\1\67\57\0\1\70\36\0\1\71\56\0\1\72\56\0"+
    "\1\73\43\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\11\10\2\0\2\10\1\74\5\0\3\10\3\0\3\10"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\7\10"+
    "\1\75\1\10\2\0\3\10\5\0\3\10\3\0\3\10"+
    "\2\43\2\0\53\43\1\44\1\0\1\44\1\0\2\44"+
    "\1\76\50\44\7\0\1\45\1\0\2\46\53\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\7\10\1\77\1\10"+
    "\2\0\3\10\5\0\3\10\3\0\3\10\13\50\1\100"+
    "\1\52\42\50\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\2\10\1\101\6\10\2\0\3\10\5\0\1\102"+
    "\2\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\11\10\2\0\2\10\1\103\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\2\10\1\104\6\10\2\0\3\10\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\3\10\1\105\5\10\2\0\3\10\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\6\10\1\106\2\10\2\0\3\10\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\11\10\2\0\1\107\2\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\7\10\1\110\1\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\6\10\1\111\2\10\2\0\3\10\5\0\2\10\1\112"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\11\10\2\0\2\10\1\113\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\6\10\1\114\2\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\11\10\2\0\3\10\5\0\3\10\3\0\2\10\1\115"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\11\10"+
    "\2\0\3\10\5\0\1\116\2\10\3\0\3\10\1\44"+
    "\1\0\1\44\1\0\1\44\1\117\1\76\50\44\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\11\10\2\0"+
    "\2\10\1\120\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\3\10\1\121\5\10"+
    "\2\0\3\10\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\11\10\2\0\3\10"+
    "\5\0\3\10\3\0\1\122\2\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\1\10\1\123\7\10\2\0"+
    "\3\10\5\0\3\10\3\0\3\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\1\10\1\124\7\10\2\0"+
    "\3\10\5\0\3\10\3\0\3\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\1\10\1\125\7\10\2\0"+
    "\3\10\5\0\3\10\3\0\3\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\11\10\2\0\2\10\1\126"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\7\10\1\127\1\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\4\10\1\130\4\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\2\10\1\131\6\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\2\10\1\132\6\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\7\10\1\133\1\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\11\10\2\0\2\10\1\134\5\0"+
    "\3\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\1\10\1\135\7\10\2\0\3\10\5\0"+
    "\3\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\1\136\10\10\2\0\3\10\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\1\137\1\10\2\0"+
    "\1\10\5\0\11\10\2\0\3\10\5\0\3\10\3\0"+
    "\1\10\1\140\1\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\4\10\1\141\4\10\2\0\3\10\5\0"+
    "\3\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\2\10\1\142\6\10\2\0\3\10\5\0"+
    "\3\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\1\10\1\143\7\10\2\0\3\10\5\0"+
    "\3\10\3\0\3\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\11\10\2\0\3\10\5\0\1\144\2\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\1\10\1\145\7\10\2\0\3\10\5\0\3\10"+
    "\3\0\3\10\7\0\1\10\1\0\2\10\2\0\1\10"+
    "\5\0\11\10\2\0\2\10\1\146\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\4\10\1\147\4\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\7\10\1\150\1\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\4\10\1\151\4\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10\7\0\1\10\1\0\2\10\2\0\1\10\5\0"+
    "\11\10\2\0\3\10\5\0\3\10\3\0\1\152\2\10"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\7\10"+
    "\1\153\1\154\2\0\3\10\5\0\3\10\3\0\3\10"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\11\10"+
    "\2\0\3\10\5\0\1\10\1\155\1\10\3\0\3\10"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\4\10"+
    "\1\156\4\10\2\0\3\10\5\0\3\10\3\0\3\10"+
    "\7\0\1\10\1\0\2\10\2\0\1\10\5\0\11\10"+
    "\2\0\3\10\5\0\2\10\1\157\3\0\3\10\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\2\10\1\160"+
    "\6\10\2\0\3\10\5\0\3\10\3\0\3\10\7\0"+
    "\1\10\1\0\2\10\2\0\1\10\5\0\11\10\2\0"+
    "\2\10\1\161\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\4\10\1\162\4\10"+
    "\2\0\3\10\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\2\10\1\163\6\10"+
    "\2\0\3\10\5\0\3\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\11\10\2\0\3\10"+
    "\5\0\1\10\1\164\1\10\3\0\3\10\7\0\1\10"+
    "\1\0\2\10\2\0\1\10\5\0\11\10\2\0\3\10"+
    "\5\0\1\165\2\10\3\0\3\10\7\0\1\10\1\0"+
    "\2\10\2\0\1\10\5\0\10\10\1\166\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\1\10\1\167\7\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\1\10\1\170\7\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\2\10\1\171\6\10\2\0\3\10"+
    "\5\0\3\10\3\0\3\10\7\0\1\10\1\0\2\10"+
    "\2\0\1\10\5\0\11\10\2\0\3\10\5\0\3\10"+
    "\3\0\1\172\2\10\7\0\1\10\1\0\2\10\2\0"+
    "\1\10\5\0\11\10\2\0\3\10\5\0\2\10\1\173"+
    "\3\0\3\10\7\0\1\10\1\0\1\10\1\174\2\0"+
    "\1\10\5\0\11\10\2\0\3\10\5\0\3\10\3\0"+
    "\3\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3948];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\1\1\1\11\3\1\4\11"+
    "\7\1\2\11\10\1\3\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\13\1\5\11\2\1"+
    "\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public DecaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DecaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return END_OF_LINE_COMMENT;
            }
          case 52: break;
          case 2: 
            { return BAD_CHARACTER;
            }
          case 53: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 54: break;
          case 4: 
            { return SLASH;
            }
          case 55: break;
          case 5: 
            { return TIMES;
            }
          case 56: break;
          case 6: 
            { return INT;
            }
          case 57: break;
          case 7: 
            { return DOT;
            }
          case 58: break;
          case 8: 
            { return TIDENT;
            }
          case 59: break;
          case 9: 
            { return OBRACE;
            }
          case 60: break;
          case 10: 
            { return CBRACE;
            }
          case 61: break;
          case 11: 
            { return SEMI;
            }
          case 62: break;
          case 12: 
            { return COMMA;
            }
          case 63: break;
          case 13: 
            { return EQUALS;
            }
          case 64: break;
          case 14: 
            { return OPARENT;
            }
          case 65: break;
          case 15: 
            { return CPARENT;
            }
          case 66: break;
          case 16: 
            { return EXCLAM;
            }
          case 67: break;
          case 17: 
            { return LT;
            }
          case 68: break;
          case 18: 
            { return GT;
            }
          case 69: break;
          case 19: 
            { return PLUS;
            }
          case 70: break;
          case 20: 
            { return MINUS;
            }
          case 71: break;
          case 21: 
            { return PERCENT;
            }
          case 72: break;
          case 22: 
            { return COMMENT_LINE;
            }
          case 73: break;
          case 23: 
            { return FLOAT;
            }
          case 74: break;
          case 24: 
            { return STRING;
            }
          case 75: break;
          case 25: 
            { return EQEQ;
            }
          case 76: break;
          case 26: 
            { return IF;
            }
          case 77: break;
          case 27: 
            { return OR;
            }
          case 78: break;
          case 28: 
            { return AND;
            }
          case 79: break;
          case 29: 
            { return NEQ;
            }
          case 80: break;
          case 30: 
            { return LEQ;
            }
          case 81: break;
          case 31: 
            { return GEQ;
            }
          case 82: break;
          case 32: 
            { return NEW;
            }
          case 83: break;
          case 33: 
            { return ASM;
            }
          case 84: break;
          case 34: 
            { return COMMENT;
            }
          case 85: break;
          case 35: 
            { return ELSE;
            }
          case 86: break;
          case 36: 
            { return TRUE;
            }
          case 87: break;
          case 37: 
            { return THIS;
            }
          case 88: break;
          case 38: 
            { return NULL;
            }
          case 89: break;
          case 39: 
            { return FALSE;
            }
          case 90: break;
          case 40: 
            { return PRINT;
            }
          case 91: break;
          case 41: 
            { return WHILE;
            }
          case 92: break;
          case 42: 
            { return CLASS;
            }
          case 93: break;
          case 43: 
            { return RETURN;
            }
          case 94: break;
          case 44: 
            { return PRINTX;
            }
          case 95: break;
          case 45: 
            { return READINT;
            }
          case 96: break;
          case 46: 
            { return EXTENDS;
            }
          case 97: break;
          case 47: 
            { return PRINTLN;
            }
          case 98: break;
          case 48: 
            { return PRINTLNX;
            }
          case 99: break;
          case 49: 
            { return READFLOAT;
            }
          case 100: break;
          case 50: 
            { return PROTECTED;
            }
          case 101: break;
          case 51: 
            { return INSTANCEOF;
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
